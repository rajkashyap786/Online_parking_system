package com.parkingSystem.OnlineParkingSystem.SecurityConfig;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.parkingSystem.OnlineParkingSystem.ServiceImpl.CustomUserDetailsService;
import com.parkingSystem.OnlineParkingSystem.security.JwtAuthenticationEntryPoint;
import com.parkingSystem.OnlineParkingSystem.security.JwtAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class MySecurityConfig {

	@Autowired
	JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
	
	@Autowired
	JwtAuthenticationFilter jwtAuthenticationFilter;
	
	@Autowired
	CustomUserDetailsService customUserDetailService;
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
		http.csrf().disable()
		.authorizeHttpRequests()
		.antMatchers("/login/usr").permitAll()
		.antMatchers("/users/createUsr").permitAll()
		.antMatchers("/users/createEmp").permitAll()
		.antMatchers("/parking/search/{keywords}").permitAll()
        .antMatchers("/users/**").authenticated()
        .antMatchers("/location/**").authenticated()
        .antMatchers("/parking/**").authenticated()
        .antMatchers("/Booking/**").authenticated()
        .antMatchers("/Contact/CreateUsr/{userId}").permitAll()
        .antMatchers("/images/**").permitAll()
        .antMatchers("/Contact/**").authenticated()
		.anyRequest().authenticated().and().cors().and()
		.exceptionHandling().authenticationEntryPoint(this.jwtAuthenticationEntryPoint).and()
		.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		
		http.addFilterBefore(this.jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
			
		DefaultSecurityFilterChain build = http.build();
		return build;
		
	}
	
	@Bean
	public AuthenticationManager authenticationManagerBean(AuthenticationConfiguration configuration) throws Exception{
		return configuration.getAuthenticationManager();
	}
	
	@Bean
	public DaoAuthenticationProvider daoAuthenticationProvider() {
		DaoAuthenticationProvider provider=new DaoAuthenticationProvider();
		provider.setUserDetailsService(this.customUserDetailService);
		provider.setPasswordEncoder(passwordEncoder());
		return provider;
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
}
